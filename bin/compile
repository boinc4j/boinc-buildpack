#!/usr/bin/env bash

# fail fast
set -eu

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

BIN_DIR="$(cd "$(dirname "$0")" && pwd)"
BP_DIR=$BIN_DIR/..
OPT_DIR=$BP_DIR/opt/

. $BP_DIR/lib/common.sh
. $BP_DIR/lib/db.sh

export_env_dir $ENV_DIR

# unpack existing cache
CACHED_DIRS="boinc-src .apt project"
for DIR in $CACHED_DIRS; do
  if [ ! -d $BUILD_DIR/$DIR ]; then
    cache_copy $DIR $CACHE_DIR $BUILD_DIR
  fi
done

install_deps() {
  ######### Borrowed from heroku-buildpack-apt
  APT_CACHE_DIR="$CACHE_DIR/apt/cache"
  APT_STATE_DIR="$CACHE_DIR/apt/state"
  APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"

  echo "-----> Installing dependencies... "
  apt-get $APT_OPTIONS update | indent
  apt-get $APT_OPTIONS -y --force-yes -d install --reinstall mysql-client python-mysqldb | indent

  for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
    dpkg -x $DEB $BUILD_DIR/.apt/
  done
}

if [ -n "${REINSTALL_DEPS:-""}" ] || [ ! -d $BUILD_DIR/.apt ]; then
  rm -rf $BUILD_DIR/.apt
  install_deps
else
  echo "-----> Using cached dependencies... "
fi

mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/sbin:\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

install_boinc() {
  #### Download BOINC source
  echo "-----> Downloading BOINC source... "
  BOINC_DIR=${1}
  mkdir -p $BOINC_DIR
  curl --silent --retry 3 -L https://api.github.com/repos/BOINC/boinc/tarball/master | tar xzm -C $BOINC_DIR --strip-components=1

  #### Build BOINC from source
  echo "-----> Making BOINC Server... "
  cd $BOINC_DIR
  ./_autosetup
  ./configure --disable-client --disable-manager
  make
  cd - > /dev/null 2>&1
}

BOINC_DIR=/app/boinc-src
if [ -n "${REBUILD_BOINC:-""}" ] || [ ! -d $BUILD_DIR/boinc-src ]; then
  mkdir -p $BOINC_DIR
  install_boinc $BOINC_DIR
else
  echo "-----> Using cached BOINC Server... "
  mv $BUILD_DIR/boinc-src $BOINC_DIR
fi

if [ -n "${REMAKE_PROJECT:-""}" ] || [ ! -d $BUILD_DIR/project ]; then
  echo "-----> Making BOINC Project... "

  if [ -n "${JAWSDB_URL:-""}" ]; then
    export_db_props "$JAWSDB_URL"
  elif [ -n "${CLEARDB_DATABASE_URL:-""}" ]; then
    export_db_props "$CLEARDB_DATABASE_URL"
  else
    echo "You must provision a database: heroku addons:create cleardb"
  fi

  export PATH=$BUILD_DIR/.apt/usr/sbin:$BUILD_DIR/.apt/usr/bin:$PATH
  export LD_LIBRARY_PATH=$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib
  export LIBRARY_PATH=$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib
  export INCLUDE_PATH=$BUILD_DIR/.apt/usr/include
  export CPATH=$INCLUDE_PATH
  export CPPPATH=$INCLUDE_PATH
  export PKG_CONFIG_PATH=$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig
  export PYTHONPATH=$BUILD_DIR/.apt/usr/lib/python2.7/dist-packages

  # This probably needs to be scrubed in profile.d
  export USER=$(whoami)

  cd $BOINC_DIR

  # Never create the db, but still load the schema
  sed -i.bak s/cursor.execute\(\"create\ database/\#cursor.execute\(\"create\ database/g py/Boinc/database.py

  if [ -d $BUILD_DIR/project ]; then
    NO_DB="--no_db"
    rm -rf $BUILD_DIR/project
  fi

  ./tools/make_project --db_host $DATABASE_HOST --db_name $DATABASE_NAME --db_user $DATABASE_USERNAME --db_passwd $DATABASE_PASSWORD ${NO_DB:-""} \
                 --user_name $(whoami) --no_query --srcdir $BOINC_DIR --project_root /app/project \
                 myapp "My App" | indent

  mv /app/project $BUILD_DIR/project
  cd - > /dev/null 2>&1
else
  echo "-----> Using cached BOINC Project... "
fi

rm -rf $BUILD_DIR/boinc-src
mv $BOINC_DIR $BUILD_DIR/boinc-src

# populate profile.d
PROFILE_PATH="$BUILD_DIR/.profile.d/boinc.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo "export PYTHONPATH=\$HOME/.apt/usr/lib/python2.7/dist-packages" >> $PROFILE_PATH

# repack cache with new assets
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $BUILD_DIR $CACHE_DIR
done
