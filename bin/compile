#!/usr/bin/env bash

# fail fast
set -eu

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

BIN_DIR="$(cd "$(dirname "$0")" && pwd)"
BP_DIR=$BIN_DIR/..
OPT_DIR=$BP_DIR/opt/

. $BP_DIR/lib/common.sh
. $BP_DIR/lib/db.sh

export_env_dir $ENV_DIR

# unpack existing cache
CACHED_DIRS="boinc-src .apt"
for DIR in $CACHED_DIRS; do
  if [ ! -d $BUILD_DIR/$DIR ]; then
    cache_copy $DIR $CACHE_DIR $BUILD_DIR
  fi
done

install_deps() {
  ######### Borrowed from heroku-buildpack-apt
  APT_CACHE_DIR="$CACHE_DIR/apt/cache"
  APT_STATE_DIR="$CACHE_DIR/apt/state"
  APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"

  echo "-----> Installing mysql-client, python-mysqldb... "
  apt-get $APT_OPTIONS update | indent
  apt-get $APT_OPTIONS -y --force-yes -d install --reinstall mysql-client python-mysqldb | indent
  mkdir -p $BUILD_DIR/.profile.d

  cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/sbin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

  for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
    dpkg -x $DEB $BUILD_DIR/.apt/
  done
}

if [ -n "${REINSTALL_DEPS:-""}" ] || [ ! -d $BUILD_DIR/.apt ]; then
  install_deps
else
  echo "-----> Using cached MySQL Client... "
fi

install_boinc() {
  #### Download BOINC source
  echo "-----> Downloading BOINC source... "
  BOINC_DIR=${1}
  mkdir -p $BOINC_DIR
  curl --silent --retry 3 -L https://api.github.com/repos/BOINC/boinc/tarball/master | tar xzm -C $BOINC_DIR --strip-components=1

  #### Build BOINC from source
  echo "-----> Making BOINC Server... "
  cd $BOINC_DIR
  ./_autosetup
  ./configure --disable-client --disable-manager
  make
  cd -
}

if [ -n "${REBUILD_BOINC:-""}" ] || [ ! -d $BUILD_DIR/boinc-src ]; then
  BOINC_DIR=/app/boinc-src
  mkdir -p $BOINC_DIR
  install_boinc $BOINC_DIR

  echo "-----> Making BOINC Project... "

  # TODO this needs to happen in release phase?
  # but only if db has not been init

  if [ -n "$JAWSDB_URL" ]; then
    export_db_props "$JAWSDB_URL"
  elif [ -n "$CLEARDB_DATABASE_URL" ]; then
    export_db_props "$CLEARDB_DATABASE_URL"
  else
    echo "You must provision a database: heroku addons:create cleardb"
  fi

  export PROJECT_NAME="myapp"

  # TODO if db is already primed set NO_DB?

  cd $BOINC_DIR/tools
  ./make_project --db_host $DATABASE_HOST --db_name $DATABASE_NAME --db_user $DATABASE_USERNAME --db_passwd $DATABASE_PASSWORD ${NO_DB:""} \
                 --user_name $(whoami) --no_query --srcdir $BOINC_DIR --project_root $BUILD_DIR/projects/$PROJECT_NAME
                 $PROJECT_NAME "My App"

  rm -rf $BUILD_DIR/boinc-src
  mv $BOINC_DIR $BUILD_DIR/boinc-src
else
  echo "-----> Using cached BOINC Server... "
fi

# populate profile.d
PROFILE_PATH="$BUILD_DIR/.profile.d/boinc.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo "export PATH=\$HOME/.apt/usr/bin:\$PATH" >> $PROFILE_PATH
echo "export PYTHONPATH=\$HOME/.apt/usr/lib/python2.7/dist-packages" >> $PROFILE_PATH

# repack cache with new assets
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $BUILD_DIR $CACHE_DIR
done
