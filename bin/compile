#!/usr/bin/env bash

# fail fast
set -eu

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

BIN_DIR="$(cd "$(dirname "$0")" && pwd)"
BP_DIR=$BIN_DIR/..
OPT_DIR=$BP_DIR/opt/
LIB_DIR=$BP_DIR/lib/

. $LIB_DIR/common.sh
. $LIB_DIR/db.sh
. $LIB_DIR/deps.sh
. $LIB_DIR/boinc.sh
. $LIB_DIR/apache2.sh

export_env_dir $ENV_DIR

REL_BOINC_PROJECT_DIR=boinc-project
BOINC_PROJECT_DIR=/app/$REL_BOINC_PROJECT_DIR

REL_BOINC_DIR=boinc-src
BOINC_DIR=/app/$REL_BOINC_DIR

USER_BOINC_DIR=$BUILD_DIR/boinc

CACHED_DIRS="REL_BOINC_DIR $REL_BOINC_PROJECT_DIR .apt"

#########################
### Validate App & Setup
########################
if [ ! -d $BUILD_DIR/.heroku/php ]; then
  echo "ERROR: You must run the heroku/php buildpack first!"
  exit 1
fi
if [ -z "$APP_NAME" ]; then
  # Once dyno metadata is available, we can drop this
  echo "ERROR: You must set APP_NAME manually."
  exit 1
fi
if [ ! -d $USER_BOINC_DIR ]; then
  echo "ERROR: No app found in boinc dir!"
  #exit 1
fi
if [ -n "${JAWSDB_URL:-""}" ]; then
  export_db_props "$JAWSDB_URL"
elif [ -n "${CLEARDB_DATABASE_URL:-""}" ]; then
  export_db_props "$CLEARDB_DATABASE_URL"
else
  echo "ERROR: You must provision a database: $ heroku addons:create cleardb"
  exit 1
fi

########################
# Unpack existing cache
########################
for DIR in $CACHED_DIRS; do
  if [ ! -d $BUILD_DIR/$DIR ]; then
    cache_copy $DIR $CACHE_DIR $BUILD_DIR
  else
    echo "ERROR: Directory $DIR already exists!
You must leave this name available for the buildpack"
    exit 1
  fi
done

########################
# Install dependencies
########################
if [ -n "${REINSTALL_DEPS:-""}" ] || [ ! -d $BUILD_DIR/.apt ]; then
  rm -rf $BUILD_DIR/.apt
  install_deps $BUILD_DIR "mysql-client python-mysqldb"
else
  echo "-----> Using cached dependencies... "
fi

##########################
# Build BOINC from source
##########################
if [ -n "${REBUILD_BOINC:-""}" ] || [ ! -d $BUILD_DIR/$REL_BOINC_DIR ]; then
  mkdir -p $BOINC_DIR
  install_boinc $BOINC_DIR
else
  echo "-----> Using cached BOINC Server... "
  mv $BUILD_DIR/$REL_BOINC_DIR $BOINC_DIR
fi

######################
# Prepare the project
######################
echo "-----> Making BOINC Project... "
export PATH=$BUILD_DIR/.apt/usr/sbin:$BUILD_DIR/.apt/usr/bin:$PATH
export PYTHONPATH=$BUILD_DIR/.apt/usr/lib/python2.7/dist-packages
export PATH=/app/.heroku/php/bin:$BUILD_DIR/.heroku/php/bin:$PATH
if [ -d $BUILD_DIR/$REL_BOINC_PROJECT_DIR ]; then
  mv $BUILD_DIR/$REL_BOINC_PROJECT_DIR $BOINC_PROJECT_DIR
fi
make_boinc_project $BOINC_DIR $BOINC_PROJECT_DIR

##################
# Install the app
##################
echo "-----> Installing BOINC App... "
install_boinc_app $BUILD_DIR $BOINC_DIR $BOINC_PROJECT_DIR $USER_BOINC_DIR

###################
# Clean up & Cache
###################
echo "-----> Finalizing... "
cd $BUILD_DIR
rm -rf $BUILD_DIR/$REL_BOINC_PROJECT_DIR
mv $BOINC_PROJECT_DIR $BUILD_DIR/$REL_BOINC_PROJECT_DIR

rm -rf $BUILD_DIR/$REL_BOINC_DIR
mv $BOINC_DIR $BUILD_DIR/$REL_BOINC_DIR

# repack cache with new assets
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $BUILD_DIR $CACHE_DIR
done

# Remove build-only files from slug
rm -rf $BUILD_DIR/$BOINC_DIR
rm -rf $BUILD_DIR/.apt
rm -rf $USER_BOINC_DIR
rm $BUILD_DIR/$REL_BOINC_PROJECT_DIR/keys/code_sign_private

apache_enable_cgid
apache_add_index_php
