#!/usr/bin/env bash

# fail fast
set -eu

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

BIN_DIR="$(cd "$(dirname "$0")" && pwd)"
BP_DIR=$BIN_DIR/..
OPT_DIR=$BP_DIR/opt/
LIB_DIR=$BP_DIR/lib/

. $LIB_DIR/common.sh
. $LIB_DIR/db.sh
. $LIB_DIR/deps.sh
. $LIB_DIR/boinc.sh

export_env_dir $ENV_DIR

#########################
### Validate App & Setup
########################
if [ -z "$APP_NAME" ]; then
  # Once dyno metadata is available, we can drop this
  echo "ERROR: You must set APP_NAME manually."
  exit 1
fi
if [ ! -d $BUILD_DIR/target/boinc/app ]; then
  echo "ERROR: No app found in target/boinc/app"
  #exit 1
fi
if [ -n "${JAWSDB_URL:-""}" ]; then
  export_db_props "$JAWSDB_URL"
elif [ -n "${CLEARDB_DATABASE_URL:-""}" ]; then
  export_db_props "$CLEARDB_DATABASE_URL"
else
  echo "ERROR: You must provision a database: $ heroku addons:create cleardb"
  exit 1
fi

########################
# Unpack existing cache
########################
CACHED_DIRS="boinc-src .apt project"
for DIR in $CACHED_DIRS; do
  if [ ! -d $BUILD_DIR/$DIR ]; then
    cache_copy $DIR $CACHE_DIR $BUILD_DIR
  fi
done

########################
# Install dependencies
########################
if [ -n "${REINSTALL_DEPS:-""}" ] || [ ! -d $BUILD_DIR/.apt ]; then
  rm -rf $BUILD_DIR/.apt
  install_deps $BUILD_DIR "mysql-client python-mysqldb"
else
  echo "-----> Using cached dependencies... "
fi

##########################
# Build BOINC from source
##########################
BOINC_DIR=/app/boinc-src
if [ -n "${REBUILD_BOINC:-""}" ] || [ ! -d $BUILD_DIR/boinc-src ]; then
  mkdir -p $BOINC_DIR
  install_boinc $BOINC_DIR
else
  echo "-----> Using cached BOINC Server... "
  mv $BUILD_DIR/boinc-src $BOINC_DIR
fi

######################
# Prepare the project
######################
echo "-----> Making BOINC Project... "
cd $BOINC_DIR

export PATH=$BUILD_DIR/.apt/usr/sbin:$BUILD_DIR/.apt/usr/bin:$PATH
export PYTHONPATH=$BUILD_DIR/.apt/usr/lib/python2.7/dist-packages
export PATH=/app/.heroku/php/bin:$BUILD_DIR/.heroku/php/bin:$PATH

# Whatever this is used for probably needs to be scrubed in profile.d
export USER=$(whoami)

# Never create the db, but still load the schema
sed -i.bak s/cursor.execute\(\"create\ database/\#cursor.execute\(\"create\ database/g py/Boinc/database.py

if [ -f $BUILD_DIR/project/config.xml ]; then
  # There's a bug here. If the cache is purged, the make_project will
  # fail because the tables exist. This really needs to check if the
  # tables exist, not the config.
  NO_DB="--no_db"
fi

BOINC_PROJECT_DIR=/app/project
./tools/make_project --db_host $DATABASE_HOST --db_name $DATABASE_NAME \
                     --db_user $DATABASE_USERNAME \
                     --db_passwd $DATABASE_PASSWORD ${NO_DB:-} \
                     --user_name $(whoami) --no_query --srcdir $BOINC_DIR \
                     --project_root $BOINC_PROJECT_DIR \
                     --url_base "https://$APP_NAME.herokuapp.com" \
                     --project_host "$APP_NAME.herokuapp.com" \
                     boinc $APP_NAME | indent

if [ -n "${OPS_USERNAME:-}" ] && [ -n "${OPS_PASSWORD:-}" ]; then
  htpasswd -cb $BOINC_PROJECT_DIR/html/ops/.htpasswd $OPS_USERNAME $OPS_PASSWORD
fi

##################
# Install the app
##################
echo "-----> Installing BOINC App... "
cd $BOINC_PROJECT_DIR
add_project_xml $BOINC_PROJECT_DIR/project.xml $APP_NAME
bin/xadd | indent

APP_VERSION=4
REL_APP_DIR=apps/$APP_NAME/$APP_VERSION

# TODO
# increment version on each deploy
# delete old versions? or keep from cache? (may require correct public key)

mkdir -p $REL_APP_DIR/x86_64-apple-darwin

#mv $BUILD_DIR/target/boinc/app $BOINC_PROJECT_DIR/project/apps/$APP_NAME

curl -O -s -L http://boinc.berkeley.edu/dl/wrapper_26014_x86_64-apple-darwin.zip
unzip wrapper_26014_x86_64-apple-darwin.zip
mv wrapper_26014_x86_64-apple-darwin $REL_APP_DIR/x86_64-apple-darwin/wrapper_26014_x86_64-apple-darwin

echo "
#!/usr/bin/env bash

for i in $(seq -s " " 1 999); do
  sleep 1
  echo working\${i}
  echo foobar\${i} > tmp\${i}.txt
done
" >  $REL_APP_DIR/x86_64-apple-darwin/test.sh
echo "
<job_desc>
    <task>
        <application>$APP_NAME</application>
        <command_line>10</command_line>
    </task>
</job_desc>
" >  $REL_APP_DIR/x86_64-apple-darwin/job.xml
echo "
<version>
   <file>
      <physical_name>wrapper_26014_x86_64-apple-darwin</physical_name>
      <main_program/>
   </file>
   <file>
      <physical_name>test.sh</physical_name>
      <logical_name>worker</logical_name>
   </file>
   <file>
      <physical_name>job.xml</physical_name>
      <logical_name>job.xml</logical_name>
   </file>
</version>
" >  $REL_APP_DIR/x86_64-apple-darwin/version.xml
echo "
<input_template>
  <file_info>
    <number>0</number>
  </file_info>
  <workunit>
    <file_ref>
      <file_number>0</file_number>
      <open_name>in</open_name>
      <copy_file/>
    </file_ref>
    <rsc_fpops_bound>1e12</rsc_fpops_bound>
    <rsc_fpops_est>1e14</rsc_fpops_est>
  </workunit>
</input_template>
" >  templates/${APP_NAME}_in
echo "
<output_template>
  <file_info>
    <name><OUTFILE_0/></name>
    <generated_locally/>
    <upload_when_present/>
    <max_nbytes>5000000</max_nbytes>
    <url><UPLOAD_URL/></url>
  </file_info>
  <result>
    <file_ref>
        <file_name><OUTFILE_0/></file_name>
        <open_name>out</open_name>
        <copy_file/>
    </file_ref>
  </result>
</output_template>
" >  templates/${APP_NAME}_out
chmod +x $REL_APP_DIR/x86_64-apple-darwin/test.sh

$BOINC_DIR/lib/crypt_prog -sign $REL_APP_DIR/x86_64-apple-darwin/test.sh keys/code_sign_private > $REL_APP_DIR/x86_64-apple-darwin/test.sh.sig
$BOINC_DIR/lib/crypt_prog -sign $REL_APP_DIR/x86_64-apple-darwin/job.xml keys/code_sign_private > $REL_APP_DIR/x86_64-apple-darwin/job.xml.sig
$BOINC_DIR/lib/crypt_prog -sign $REL_APP_DIR/x86_64-apple-darwin/wrapper_26014_x86_64-apple-darwin keys/code_sign_private > $REL_APP_DIR/x86_64-apple-darwin/wrapper_26014_x86_64-apple-darwin.sig

# We might need to cache these instead
rm keys/code_sign_private
#rm keys/upload_private

yes | bin/update_versions | indent

cd $BUILD_DIR
create_start_script

###################
# Clean up & Cache
###################
echo "-----> Finalizing... "
cd $BUILD_DIR
rm -rf $BUILD_DIR/project
mv $BOINC_PROJECT_DIR $BUILD_DIR/project

rm -rf $BUILD_DIR/boinc-src
mv $BOINC_DIR $BUILD_DIR/boinc-src

# repack cache with new assets
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $BUILD_DIR $CACHE_DIR
done

# Remove build-only files from slug
rm -rf $BUILD_DIR/boinc-src
rm -rf $BUILD_DIR/.apt
